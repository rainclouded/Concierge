{
   "openapi": "3.1.0",
   "info": {
      "title": "Concierge",
      "description": "An API to access the Concierge system",
      "version": "1.0.0"
   },
   "servers": [
      {
         "url": "https://example.com/",
         "description": "Production server"
      }
   ],
   "components": {
      "schemas": {
         "Task": {
            "type": "object",
            "properties": {
               "task-id": {
                  "type": "integer",
                  "description": "task's id",
                  "example": "123"
               },
               "name": {
                  "type": "string",
                  "description": "Name of the tasks"
               },
               "description": {
                  "type": "string",
                  "description": "description of tasks"
               },
               "created": {
                  "type": "string",
                  "description": "Date and time this task was created"
               },
               "start": {
                  "type": "string",
                  "description": "Date and time this task becomes actionable"
               },
               "end": {
                  "type": "string",
                  "description": "Date and time this task overdue"
               },
               "on-expiration": {
                  "type": "string",
                  "description": "How the system should handle this task if it becomes overdue",
                  "example": "escale"
               },
               "view-permission-name": {
                  "type": "string",
                  "description": "Only accounts with this permission can see this tasks",
                  "example": "can-view-admin-tasks"
               },
               "edit-permission-name": {
                  "type": "string",
                  "description": "Only accounts with this permission can edit, assign, or claim this tasks",
                  "example": "can-edit-admin-tasks"
               },
               "responsible-permission-name": {
                  "type": "string",
                  "description": "Accounts with this permission are responsible for this task. Adjusts how task is presented to accounts of groups with this permission",
                  "example": "is-responsible-for-admin-tasks"
               },
               "can-edit": {
                  "type": "boolean",
                  "description": "indicates if this account can edit this task"
               },
               "is-responsible": {
                  "type": "boolean",
                  "description": "indicates if this account is responsible for this task"
               },
               "is-subscribed": {
                  "type": "boolean",
                  "description": "indicates if this account is subscribed for this task"
               },
               "location": {
                  "type": "string",
                  "description": "Location of the task. Primarily used for room-related tasks"
               },
               "trigger": {
                  "type": "string",
                  "description": "Reason task entered the system",
                  "example": "guest-request"
               },
               "priority": {
                  "type": "integer",
                  "description": "Used to sort tasks"
               },
               "assigned-to": {
                  "type": "integer",
                  "description": "Account ID of responsible staff"
               },
               "linked-task-id": {
                  "type": "integer",
                  "description": "References another task"
               },
               "status": {
                  "type": "string",
                  "description": "Indicates if a task is complete or not",
                  "example": "in-progress"
               },
               "subscribed-accounts": {
                  "type": "array",
                  "description": "List of accounts that should be able to see this task, regardless of permission group",
                  "items": {
                     "type": "integer"
                  }
               },
               "special-instructions": {
                  "type": "string",
                  "description": "Any additional notes needed for this task"
               },
               "guest-facing-comments": {
                  "type": "string",
                  "description": "Notes that the subscribed guests should be able to see."
               }
            }
         },
         "Task-Template": {
            "type": "object",
            "properties": {
               "task-id": {
                  "type": "integer",
                  "description": "template's id",
                  "example": "123"
               },
               "name": {
                  "type": "string",
                  "description": "Name of the template"
               },
               "description": {
                  "type": "string",
                  "description": "description of template"
               },
               "sla": {
                  "type": "number",
                  "description": "Number of hours between task creation and becoming overdue"
               },
               "start-delay": {
                  "type": "number",
                  "description": "Number of hours between triggering event and task start"
               },
               "on-expiration": {
                  "type": "string",
                  "description": "How the system should handle this task if the SLA is violated",
                  "example": "escale"
               },
               "view-permission-name": {
                  "type": "string",
                  "description": "Only accounts with this permission can see this tasks",
                  "example": "can-view-admin-tasks"
               },
               "edit-permission-name": {
                  "type": "string",
                  "description": "Only accounts with this permission can edit, assign, or claim this tasks",
                  "example": "can-edit-admin-tasks"
               },
               "responsible-permission-name": {
                  "type": "string",
                  "description": "Accounts with this permission are responsible for this task. Adjusts how task is presented to accounts of groups with this permission",
                  "example": "is-responsible-for-admin-tasks"
               },
               "location": {
                  "type": "string",
                  "description": "Location of the task. Primarily used for room-related tasks",
                  "example": "::trigger::room"
               },
               "trigger": {
                  "type": "string",
                  "description": "Reason task entered the system. Triggers may have metadata when the event occurs. Such as '::trigger::room'",
                  "example": "guest-request"
               },
               "priority": {
                  "type": "integer",
                  "description": "Used to sort tasks"
               },
               "assigned-to": {
                  "type": "integer",
                  "description": "Account ID of responsible staff"
               },
               "linked-task-id": {
                  "type": "integer",
                  "description": "References another task"
               }
            }
         },
         "Reservation": {
            "type": "object",
            "properties": {
               "reservation-id": {
                  "type": "integer",
                  "description": "Room's id",
                  "example": "123"
               },
               "room-number": {
                  "type": "integer",
                  "description": "Associated room for the reservation",
                  "example": "123"
               },
               "start": {
                  "type": "integer",
                  "description": "Date and time the reservation becomes active",
                  "example": "123"
               },
               "end": {
                  "type": "integer",
                  "description": "Date and time of checkout",
                  "example": "123"
               }
            }
         }
      }
   },
   "paths": {
      "/accounts": {
         "summary": "Store and fetch data related to accounts",
         "get": {
            "summary": "Create Account",
            "description": "Calls GET /permission-groups/{group-id}/accounts",
            "operationId": "createAccount",
            "tags": [
               "Accounts"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "group-name",
                  "in": "query",
                  "description": "Filter results based by the permission group",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "group-id",
                  "in": "query",
                  "description": "Filter results based by the permission group",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "status",
                  "in": "query",
                  "description": "Filter results based on the status property of the accounts",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "reservation-id",
                  "in": "query",
                  "description": "Filter by reservation id",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Confirmation accounts is active",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message": {
                                 "type": "string",
                                 "example": "You have contacted the accounts"
                              }
                           },
                           "required": [
                              "message"
                           ]
                        }
                     }
                  }
               }
            }
         },
         "post": {
            "summary": "Create New Account",
            "description": "Creates a new user account. Requires a username and type. If type is 'staff', a password must also be provided.",
            "operationId": "postAccounts",
            "tags": [
               "Accounts"
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "username": {
                              "type": "string",
                              "description": "The username of the new account"
                           },
                           "type": {
                              "type": "string",
                              "enum": [
                                 "guest",
                                 "staff"
                              ],
                              "description": "The type of account, either 'guest' or 'staff'"
                           },
                           "password": {
                              "type": "string",
                              "description": "Required if type is 'staff'"
                           }
                        },
                        "required": [
                           "username",
                           "type"
                        ],
                        "additionalProperties": false
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "User created successfully",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message": {
                                 "type": "string",
                                 "example": "User created successfully. password: {new_password}"
                              }
                           },
                           "required": [
                              "message"
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message": {
                                 "type": "string",
                                 "example": "Could not create user"
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      },
      "/accounts/update": {
         "summary": "Updates the account of a user.",
         
         "put": {
            "summary": "Update Account",
            "operationId": "updateAccount",
            "tags": [
               "Accounts"
            ], 
            "requestBody": {
               "required": true,
               "content": {
               "application/json": {
                  "schema": {
                     "type": "object",
                     "properties": {
                     "username": {
                        "type": "string",
                        "description": "The username of the user to update",
                     }
                     },
                     "required": [
                     "username"
                     ]
                  }
               }
               }
            },
            "parameters": [
               {
               "name": "x-api-key",
               "in": "header",
               "required": true,
               "schema": {
                  "type": "string",
                  "description": "JWT token for authentication"
               }
               }
            ],
            "responses": {
               "200": {
               "description": "User successfully updated",
               "content": {
                  "application/json": {
                     "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "{username} Successfully updated!\npassword: {password}"
                        }
                     },
                     "required": [
                        "message"
                     ]
                     }
                  }
               }
               },
               "401": {
               "description": "Cannot update user",
               "content": {
                  "application/json": {
                     "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "Cannot delete user."
                        },
                        "status": {
                           "type": "string",
                           "example": "error"
                        }
                     },
                     "required": [
                        "message",
                        "status"
                     ]
                     }
                  }
               }
               },
               "404": {
               "description": "User not found",
               "content": {
                  "application/json": {
                     "schema": {
                     "type": "object",
                     "properties": {
                        "message": {
                           "type": "string",
                           "example": "User not found."
                        },
                        "status": {
                           "type": "string",
                           "example": "error"
                        }
                     },
                     "required": [
                        "message",
                        "status"
                     ]
                     }
                  }
               }
               }
            }
         }
      },

      "/accounts/delete": {
         "summary": "Attempt to delete an account",
         "post": {
            "summary": "Account Deletion",
            "operationId": "postDeleteAttempt",
            "tags": [
               "Accounts"
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                  "schema": {
                     "type": "object",
                     "properties": {
                        "username": {
                        "type": "string",
                        "description": "The name of the user to delete"
                        }
                     },
                     "required": [
                        "username"
                     ]
                  }
                  }
               }
            },
            "parameters": [
               {
                  "name": "x-api-key",
                  "in": "header",
                  "required": true,
                  "schema": {
                  "type": "string",
                  "description": "JWT token for authentication"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "User successfully deleted",
                  "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                        "message": {
                           "type": "string",
                           "example": "{Username} Successfully deleted!"
                        },
                        "status": {
                           "type": "string",
                           "example": "ok"
                        }
                        },
                        "required": [
                        "message",
                        "status"
                        ]
                     }
                  }
                  }
               },
               "401": {
                  "description": "Deletion could not be completed",
                  "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                        "message": {
                           "type": "string",
                           "example": "Deletion could not be completed"
                        },
                        "status": {
                           "type": "string",
                           "example": "error"
                        }
                        },
                        "required": [
                        "message",
                        "status"
                        ]
                     }
                  }
                  }
               },
               "403": {
                  "description": "Action not permitted",
                  "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                        "message": {
                           "type": "string",
                           "example": "Action not permitted"
                        },
                        "status": {
                           "type": "string",
                           "example": "forbidden"
                        }
                        },
                        "required": [
                        "message",
                        "status"
                        ]
                     }
                  }
                  }
               }
            }
         }
      },
      "/accounts/login_attempt": {
         "summary": "Attempt to login to an account",
         "post": {
            "summary": "Account Auth",
            "operationId": "postLoginAttempt",
            "tags": [
               "Accounts"
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "username": {
                              "type": "string",
                              "description": "Username to authenticate"
                           },
                           "password": {
                              "type": "string",
                              "description": "Password to authenticate"
                           }
                        },
                        "required": [
                           "username",
                           "password"
                        ]
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Authentication successful",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message": {
                                 "type": "string",
                                 "example": "Welcome, {username}!"
                              }
                           },
                           "required": [
                              "message"
                           ]
                        }
                     }
                  }
               },
               "401": {
                  "description": "Login Fail - Invalid Credentials",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "message": {
                                 "type": "string",
                                 "example": "Login Fail - Invalid Credentials"
                              }
                           },
                           "required": [
                              "message"
                           ]
                        }
                     }
                  }
               }
            }
         }
      },
      "/permissions": {
         "summary": "Store and fetch data related to permissions",
         "get": {
            "summary": "View All Permission Names",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session",
            "operationId": "getPermissions",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Filter results based on the name of the permission",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of permission names",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "permission-id": {
                                          "type": "integer",
                                          "description": "Permission ID"
                                       },
                                       "permission-name": {
                                          "type": "string",
                                          "description": "Permission's name"
                                       }
                                    },
                                    "required": [
                                       "permission-id",
                                       "permission-name"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "post": {
            "summary": "Create New Permission",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session",
            "operationId": "postPermissions",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of the permission"
                           },
                           "default-state": {
                              "type": "boolean",
                              "description": "State to initialize all account with for this permission. Defaults to False"
                           }
                        },
                        "required": [
                           "name"
                        ]
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Permission created successfully",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "permission-id": {
                                          "type": "integer",
                                          "description": "Permission ID"
                                       },
                                       "permission-name": {
                                          "type": "string",
                                          "description": "Permission's name"
                                       }
                                    },
                                    "required": [
                                       "permission-id",
                                       "permission-name"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               },
               "409": {
                  "description": "Conflict"
               }
            }
         }
      },
      "/permissions/{permission-name-or-id}/sessions/{X-API-KEY}": {
         "summary": "Checks if the session has the given permission",
         "get": {
            "summary": "Check Sesssion Permission",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session",
            "operationId": "getPermissionsSessions",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "permission-name-or-id",
                  "in": "path",
                  "description": "A permission name or id to check for a specific session",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "X-API-KEY",
                  "in": "path",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "The permission state of the associated session key",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "account-id": {
                                 "type": "integer",
                                 "description": "Account ID associated to session key. If X-API-KEY associated to an anonymous session, returns -1"
                              },
                              "permission-status": {
                                 "type": "boolean",
                                 "description": "State of found permission"
                              }
                           },
                           "required": [
                              "account-id",
                              "permission-status"
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request",
                  "example": "Permission not found"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/permission-groups": {
         "summary": "Store or fetch permission groups",
         "get": {
            "summary": "View all permission groups",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session",
            "operationId": "getPermissionGroups",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Filter results to permission groups that contain the provided string",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "with-permission",
                  "in": "query",
                  "description": "Filter results to permission groups that have the specified permission",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of permission groups",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "group-id": {
                                          "type": "integer",
                                          "description": "Permission group ID",
                                          "example": "123"
                                       },
                                       "group-name": {
                                          "type": "string",
                                          "description": "Name of the permission group",
                                          "example": "admins"
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Description of the permission group",
                                          "example": "Admins have full control of the system"
                                       }
                                    },
                                    "required": [
                                       "group-id",
                                       "group-name"
                                    ]
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "post": {
            "summary": "Create New Permission Group",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "postPermissionGroups",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "name": {
                              "type": "string",
                              "description": "The name of the permission group"
                           },
                           "template-group-id": {
                              "type": "integer",
                              "description": "Copies all permission states from indicated permission group"
                           },
                           "permissions": {
                              "type": "array",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "permission-id": {
                                       "type": "integer",
                                       "description": "Permission IDs to initialize "
                                    },
                                    "state": {
                                       "type": "boolean",
                                       "description": "Whether the provided permission should be set true or false"
                                    }
                                 }
                              }
                           }
                        },
                        "required": [
                           "name"
                        ]
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Permission group created successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/permission-groups/{group-id}": {
         "summary": "Store or fetch permission for a permission groups",
         "get": {
            "summary": "View Permission Group Details",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session. Is part of the permissions service, otherwise it would request GET ",
            "operationId": "getPermissionGroupID",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "group-id",
                  "in": "path",
                  "description": "A permission name or id to check for a specific session",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "name",
                  "in": "query",
                  "description": "Filter results to permission that contain the provided string",
                  "required": false,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Details about the permission group",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "group-id": {
                                 "type": "integer",
                                 "description": "Name of the group"
                              },
                              "group-name": {
                                 "type": "string",
                                 "description": "Name of the group",
                                 "example": "admins"
                              },
                              "description": {
                                 "type": "string",
                                 "description": "Description of the permission group",
                                 "example": "Admins have full control of the system"
                              },
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "permission-id": {
                                          "type": "integer",
                                          "description": "Permission ID",
                                          "example": "123"
                                       },
                                       "permission-name": {
                                          "type": "string",
                                          "description": "Name of the permission"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "put": {
            "summary": "Changes the permission state for the permission group",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "putPermissionGroupId",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "group-id",
                  "in": "path",
                  "description": "Group to modify",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "permissions": {
                              "type": "array",
                              "items": {
                                 "type": "object",
                                 "properties": {
                                    "permission-id": {
                                       "type": "integer",
                                       "description": "Permission IDs to modify"
                                    },
                                    "state": {
                                       "type": "boolean",
                                       "description": "Whether the provided permission should be set true or false"
                                    }
                                 }
                              }
                           }
                        },
                        "required": [
                           "permissions"
                        ]
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Permission group modified successfully"
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/permission-groups/{group-id}/accounts": {
         "summary": "Add or remove accounts from a permission group",
         "get": {
            "summary": "View Accounts in Group",
            "description": "Requests GET accounts to add details to account ids. Requests GET /sessions/{sessionId} to get accountID associated to current session. Is part of the permissions service, otherwise it would use GET /permissions/{permission-name-or-id}/sessions/{X-API-KEY}",
            "operationId": "getPermissionGroupAccounts",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "group-id",
                  "in": "path",
                  "description": "A permission name or id to check for a specific session",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of account ids in group",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "account-id": {
                                          "type": "integer",
                                          "description": "account's id",
                                          "example": "123"
                                       },
                                       "name": {
                                          "type": "string",
                                          "description": "Name of the account",
                                          "example": "John Doe"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "post": {
            "summary": "Adds an account to permission group",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "postPermissionGroupAccounts",
            "tags": [
               "Permissions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "add-accounts": {
                              "type": "array",
                              "items": {
                                 "type": "integer",
                                 "description": "Account IDs to add to group"
                              }
                           },
                           "remove-accounts": {
                              "type": "array",
                              "items": {
                                 "type": "integer",
                                 "description": "Account IDs to add to group"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Permission group modified successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/sessions/{X-API-KEY}": {
         "summary": "Get session details",
         "get": {
            "summary": "View session details",
            "operationId": "getSession",
            "tags": [
               "Sessions"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "path",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Details about associated session",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "account-id": {
                                 "type": "integer",
                                 "description": "Account ID",
                                 "example": "123"
                              }
                           },
                           "required": [
                              "account-id"
                           ]
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               }
            }
         }
      },
      "/sessions": {
         "summary": "Start or access sessions",
         "post": {
            "summary": "Login",
            "description": "Requests POST /accounts/login_attempt to validate login credentials.",
            "operationId": "postSessions",
            "tags": [
               "Sessions"
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "username": {
                              "type": "string",
                              "description": "Username to login"
                           },
                           "password": {
                              "type": "integer",
                              "description": "Password to login"
                           }
                        },
                        "required": [
                           "username",
                           "password"
                        ]
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Login was successful",
                  "headers": {
                     "Set-Cookie": {
                        "description": "Session cookie",
                        "schema": {
                           "type": "string"
                        },
                        "example": "X-API-KEY=abc123; Path=/; HttpOnly; Secure"
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/incident-reports": {
         "summary": "View or add incident reports",
         "get": {
            "summary": "View Incident Reports",
            "operationId": "getIncidentReports",
            "tags": [
               "Incident Reports"
            ],
            "parameters": [
               {
                  "name": "severities",
                  "in": "query",
                  "description": "A comma-separated list of severity values to filter the reports. Valid values: LOW, MEDIUM, HIGH, CRITICAL.",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "LOW,HIGH"
                  }
               },
               {
                  "name": "statuses",
                  "in": "query",
                  "description": "A comma-separated list of status values to filter the reports. Valid values: OPEN, CLOSED, RESOLVED, IN_PROGRESS.",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "example": "OPEN,CLOSED"
                  }
               },
               {
                  "name": "beforeDate",
                  "in": "query",
                  "description": "A date string to filter reports created before this date (format: YYYY-MM-DD).",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "format": "date",
                     "example": "2023-10-01"
                  }
               },
               {
                  "name": "afterDate",
                  "in": "query",
                  "description": "A date string to filter reports created after this date (format: YYYY-MM-DD).",
                  "required": false,
                  "schema": {
                     "type": "string",
                     "format": "date",
                     "example": "2023-09-01"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of incident reports",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "incident-reports": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "integer",
                                          "description": "Unique value that identifies the incident report",
                                          "example": 123
                                       },
                                       "title": {
                                          "type": "string",
                                          "description": "Title of the incident report",
                                          "example": "Power Outage"
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "Detailed description of the incident",
                                          "example": "A power outage occurred due to a storm"
                                       },
                                       "created_at": {
                                          "type": "string",
                                          "format": "date-time",
                                          "description": "Timestamp when the incident report was created",
                                          "example": "2024-10-06T12:34:56Z"
                                       },
                                       "updated_at": {
                                          "type": "string",
                                          "format": "date-time",
                                          "description": "Timestamp when the incident report was last updated",
                                          "example": "2024-10-07T14:22:30Z"
                                       },
                                       "filing_person_id": {
                                          "type": "integer",
                                          "description": "Account ID of the person filing the report",
                                          "example": 456
                                       },
                                       "reviewer_id": {
                                          "type": "integer",
                                          "description": "Account ID of the person reviewing the report.",
                                          "example": 789
                                       },
                                       "severity": {
                                          "type": "string",
                                          "description": "Severity of incident report.",
                                          "example": "LOW"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "Status of incident report.",
                                          "example": "Open"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "We had trouble fetching your incident reports"
               }
            }
         },
         "post": {
            "summary": "Create Incident Report",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "postIncident",
            "tags": [
               "Incident Reports"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "title": {
                              "type": "string",
                              "description": "Title of the incident report",
                              "example": "Power Outage"
                           },
                           "description": {
                              "type": "string",
                              "description": "Detailed description of the incident",
                              "example": "A power outage occurred due to a storm"
                           },
                           "filing_person_id": {
                              "type": "integer",
                              "description": "Account ID of the person filing the report",
                              "example": 456
                           },
                           "reviewer_id": {
                              "type": "integer",
                              "description": "Account ID of the person reviewing the report.",
                              "example": 789
                           },
                           "severity": {
                              "type": "string",
                              "description": "Severity of incident report.",
                              "example": "LOW"
                           },
                           "status": {
                              "type": "string",
                              "description": "Status of incident report.",
                              "example": "Open"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Report created successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/incident_reports/{id}": {
         "get": {
            "summary": "View Specified Incident Report",
            "operationId": "getIncidentReportById",
            "tags": [
               "Incident Reports"
            ],
            "parameters": [
               {
                  "name": "id",
                  "in": "path",
                  "description": "Id of incident report to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "An incident report",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "id": {
                                 "type": "integer",
                                 "description": "Unique value that identifies the incident report",
                                 "example": 123
                              },
                              "title": {
                                 "type": "string",
                                 "description": "Title of the incident report",
                                 "example": "Power Outage"
                              },
                              "description": {
                                 "type": "string",
                                 "description": "Detailed description of the incident",
                                 "example": "A power outage occurred due to a storm"
                              },
                              "created_at": {
                                 "type": "string",
                                 "format": "date-time",
                                 "description": "Timestamp when the incident report was created",
                                 "example": "2024-10-06T12:34:56Z"
                              },
                              "updated_at": {
                                 "type": "string",
                                 "format": "date-time",
                                 "description": "Timestamp when the incident report was last updated",
                                 "example": "2024-10-07T14:22:30Z"
                              },
                              "filing_person_id": {
                                 "type": "integer",
                                 "description": "Account ID of the person filing the report",
                                 "example": 456
                              },
                              "reviewer_id": {
                                 "type": "integer",
                                 "description": "Account ID of the person reviewing the report.",
                                 "example": 789
                              },
                              "severity": {
                                 "type": "string",
                                 "description": "Severity of incident report.",
                                 "example": "LOW"
                              },
                              "status": {
                                 "type": "string",
                                 "description": "Status of incident report.",
                                 "example": "Open"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "Incident report with specified id not found."
               }
            }
         },
         "put": {
            "summary": "Update Incident Report",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "putIncidentReport",
            "tags": [
               "Incident Reports"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Id of incident report to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "id": {
                              "type": "integer",
                              "description": "Unique value that identifies the incident report",
                              "example": 123
                           },
                           "title": {
                              "type": "string",
                              "description": "Title of the incident report",
                              "example": "Power Outage"
                           },
                           "description": {
                              "type": "string",
                              "description": "Detailed description of the incident",
                              "example": "A power outage occurred due to a storm"
                           },
                           "created_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the incident report was created",
                              "example": "2024-10-06T12:34:56Z"
                           },
                           "updated_at": {
                              "type": "string",
                              "format": "date-time",
                              "description": "Timestamp when the incident report was last updated",
                              "example": "2024-10-07T14:22:30Z"
                           },
                           "filing_person_id": {
                              "type": "integer",
                              "description": "Account ID of the person filing the report",
                              "example": 456
                           },
                           "reviewer_id": {
                              "type": "integer",
                              "description": "Account ID of the person reviewing the report.",
                              "example": 789
                           },
                           "severity": {
                              "type": "string",
                              "description": "Severity of incident report.",
                              "example": "LOW"
                           },
                           "status": {
                              "type": "string",
                              "description": "Status of incident report.",
                              "example": "Open"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Incident Report updated successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'title' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "delete": {
            "summary": "Delete Incident Report",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "deleteAmenities",
            "tags": [
               "Incident Reports"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "id",
                  "in": "path",
                  "description": "Id of incident report to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "201": {
                  "description": "Amenity deleted successfully"
               },
               "400": {
                  "description": "Amenity not found"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/amenities": {
         "summary": "View, add or modify hotel amenities",
         "get": {
            "summary": "View hotel amenities",
            "description": "Requests /permissions/{permission-name-or-id}/sessions/{X-API-KEY} for access permission",
            "operationId": "getAmenities",
            "tags": [
               "Amenities"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of amenities",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "Id": {
                                          "type": "integer",
                                          "description": "amenity's id",
                                          "example": "123"
                                       },
                                       "Name": {
                                          "type": "string",
                                          "description": "Name of the amenity"
                                       },
                                       "Description": {
                                          "type": "string",
                                          "description": "Description of the amenity"
                                       },
                                       "StartTime": {
                                          "type": "string",
                                          "description": "Opening time of amenity"
                                       },
                                       "EndTime": {
                                          "type": "string",
                                          "description": "Closing time of amenity"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "Amenities not found."
               }
            }
         },
         "post": {
            "summary": "Create Amenity",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "postAmenities",
            "tags": [
               "Amenities"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "Name": {
                              "type": "string",
                              "description": "Name of the amenity"
                           },
                           "Description": {
                              "type": "string",
                              "description": "Description of the amenity"
                           },
                           "StartTime": {
                              "type": "string",
                              "description": "Opening time of amenity"
                           },
                           "EndTime": {
                              "type": "string",
                              "description": "Closing time of amenity"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Amenity created successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/amenities/{id}": {
         "get": {
            "summary": "View hotel amenity",
            "operationId": "getAmenityById",
            "tags": [
               "Amenities"
            ],
            "parameters": [
               {
                  "name": "amenity-id",
                  "in": "path",
                  "description": "Id of amenity to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "An amenity",
                  "content": {
                     "application/json": {
                        "schema": {
                           "schema": {
                              "type": "object",
                              "properties": {
                                 "Id": {
                                    "type": "integer",
                                    "description": "amenity's id",
                                    "example": "123"
                                 },
                                 "Name": {
                                    "type": "string",
                                    "description": "Name of the amenity"
                                 },
                                 "Description": {
                                    "type": "string",
                                    "description": "Description of the amenity"
                                 },
                                 "StartTime": {
                                    "type": "string",
                                    "description": "Opening time of amenity"
                                 },
                                 "EndTime": {
                                    "type": "string",
                                    "description": "Closing time of amenity"
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "Amenity with specified not found."
               }
            }
         },
         "put": {
            "summary": "Update Amenity",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "putAmenities",
            "tags": [
               "Amenities"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amenity-id",
                  "in": "path",
                  "description": "Id of amenity to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "Id": {
                              "type": "integer",
                              "description": "amenity's id",
                              "example": "123"
                           },
                           "Name": {
                              "type": "string",
                              "description": "Name of the amenity"
                           },
                           "Description": {
                              "type": "string",
                              "description": "Description of the amenity"
                           },
                           "StartTime": {
                              "type": "string",
                              "description": "Opening time of amenity"
                           },
                           "EndTime": {
                              "type": "string",
                              "description": "Closing time of amenity"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Amenity updated successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "delete": {
            "summary": "Delete Amenity",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "deleteAmenities",
            "tags": [
               "Amenities"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "amenity-id",
                  "in": "path",
                  "description": "Id of amenity to adjust",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Amenity deleted successfully"
               },
               "400": {
                  "description": "Amenity not found"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "tasks": {
         "summary": "View, add or modify hotel service tasks",
         "get": {
            "summary": "View all service tasks",
            "description": "Requests /permissions/{permission-name-or-id}/sessions/{X-API-KEY} for access permission",
            "operationId": "getTasks",
            "tags": [
               "Tasks"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of tasks",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "permissions": {
                                 "type": "array",
                                 "items": {
                                    "type": "object",
                                    "properties": {
                                       "id": {
                                          "type": "integer",
                                          "description": "tasks's id",
                                          "example": "123"
                                       },
                                       "roomId": {
                                          "type": "integer",
                                          "description": "room number of requester"
                                       },
                                       "taskType": {
                                          "type": "string",
                                          "description": "type of task"
                                       },
                                       "description": {
                                          "type": "string",
                                          "description": "description of tasks"
                                       },
                                       "createdAt": {
                                          "type": "datetime",
                                          "description": "Date and time this task was created"
                                       },
                                       "requesterId": {
                                          "type": "integer",
                                          "description": "account id of requester"
                                       },
                                       "assigneeId": {
                                          "type": "integer",
                                          "description": "account id of assignee"
                                       },
                                       "status": {
                                          "type": "string",
                                          "description": "status of task"
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "Tasks not found."
               }
            }
         },
         "post": {
            "summary": "Create Task",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "postTasks",
            "tags": [
               "Tasks"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "roomId": {
                              "type": "integer",
                              "description": "room number of requester"
                           },
                           "taskType": {
                              "type": "string",
                              "description": "type of task"
                           },
                           "description": {
                              "type": "string",
                              "description": "description of tasks"
                           },
                           "requesterId": {
                              "type": "integer",
                              "description": "account id of requester"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Task created successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'taskType' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "/tasks/{id}": {
         "get": {
            "summary": "View task",
            "operationId": "getTaskById",
            "tags": [
               "Tasks"
            ],
            "parameters": [
               {
                  "name": "task-id",
                  "in": "path",
                  "description": "Id of task to view",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A task",
                  "content": {
                     "application/json": {
                        "schema": {
                           "schema": {
                              "type": "object",
                              "properties": {
                                 "id": {
                                    "type": "integer",
                                    "description": "tasks's id",
                                    "example": "123"
                                 },
                                 "roomId": {
                                    "type": "integer",
                                    "description": "room number of requester"
                                 },
                                 "taskType": {
                                    "type": "string",
                                    "description": "type of task"
                                 },
                                 "description": {
                                    "type": "string",
                                    "description": "description of tasks"
                                 },
                                 "createdAt": {
                                    "type": "datetime",
                                    "description": "Date and time this task was created"
                                 },
                                 "requesterId": {
                                    "type": "integer",
                                    "description": "account id of requester"
                                 },
                                 "assigneeId": {
                                    "type": "integer",
                                    "description": "account id of assignee"
                                 },
                                 "status": {
                                    "type": "string",
                                    "description": "status of task"
                                 }
                              }
                           }
                        }
                     }
                  }
               },
               "401":{
                  "description": "Unauthorized"
               },
               "404": {
                  "description": "task with specified not found."
               }
            }
         },
         "put": {
            "summary": "Update Task",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "putTasks",
            "tags": [
               "Tasks"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "task-id",
                  "in": "path",
                  "description": "Id of task to update",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "taskType": {
                              "type": "string",
                              "description": "type of task"
                           },
                           "description": {
                              "type": "string",
                              "description": "description of tasks"
                           },
                           "assigneeId": {
                              "type": "integer",
                              "description": "account id of assignee"
                           },
                           "status": {
                              "type": "string",
                              "description": "status of task"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "200": {
                  "description": "Task updated successfully"
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "delete": {
            "summary": "Delete Task",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "deleteAmenities",
            "tags": [
               "Tasks"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "task-id",
                  "in": "path",
                  "description": "Id of task to delete",
                  "required": true,
                  "schema": {
                     "type": "integer"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "Task deleted successfully"
               },
               "400": {
                  "description": "Task not found"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "reservations": {
         "summary": "List all reservations the session has permission for",
         "get": {
            "summary": "Get List of Resrvations",
            "description": "Requests /permissions/{permission-name-or-id}/sessions/{X-API-KEY} for access permission.",
            "operationId": "getReservations",
            "tags": [
               "Reservations"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "start-before",
                  "in": "query",
                  "description": "Filter reservations by start time",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "start-after",
                  "in": "query",
                  "description": "Filter reservations by start time",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "end-before",
                  "in": "query",
                  "description": "Filter reservations by end time",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "end-after",
                  "in": "query",
                  "description": "Filter reservations by end time",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "room",
                  "in": "query",
                  "description": "Filter reservations by room number",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "responses": {
               "200": {
                  "description": "A list of templates guests can use",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "reservation-id": {
                                 "type": "integer",
                                 "description": "Room's id"
                              },
                              "room-number": {
                                 "type": "integer",
                                 "description": "Associated room for the reservation"
                              },
                              "start": {
                                 "type": "string",
                                 "description": "Date and time the reservation becomes active"
                              },
                              "end": {
                                 "type": "string",
                                 "description": "Date and time of checkout"
                              },
                              "special-instructions": {
                                 "type": "string",
                                 "description": "Special instructions from guest"
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         },
         "post": {
            "summary": "Create a Reservation",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session. SIDE EFFECT! A temporary account is generated when the room is created",
            "operationId": "postReservation",
            "tags": [
               "Reservations"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "room-number": {
                              "type": "integer",
                              "description": "Associated room for the reservation",
                              "example": "123"
                           },
                           "start": {
                              "type": "integer",
                              "description": "Date and time the reservation becomes active",
                              "example": "123"
                           },
                           "end": {
                              "type": "integer",
                              "description": "Date and time of checkout",
                              "example": "123"
                           },
                           "associated-account_ids": {
                              "type": "array",
                              "items": {
                                 "type": "integer"
                              }
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Task created successfully",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "code": {
                                 "type": "integer",
                                 "example": "The code used to log in to the guest portal."
                              }
                           }
                        }
                     }
                  }
               },
               "400": {
                  "description": "Bad request",
                  "content": {
                     "application/json": {
                        "schema": {
                           "type": "object",
                           "properties": {
                              "error": {
                                 "type": "string",
                                 "example": "The 'name' field is required"
                              }
                           }
                        }
                     }
                  }
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      },
      "reservation/{reservation-id}": {
         "put": {
            "summary": "Update Reservation",
            "description": "Requests GET /sessions/{sessionId} to get accountID associated to current session.",
            "operationId": "putReservation",
            "tags": [
               "Reservations"
            ],
            "parameters": [
               {
                  "name": "X-API-KEY",
                  "in": "cookie",
                  "description": "A session key, associated to an account with the necessary permissions for authenticating user",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               },
               {
                  "name": "reservation-id",
                  "in": "path",
                  "description": "Id of reservation to adjust",
                  "required": true,
                  "schema": {
                     "type": "string"
                  }
               }
            ],
            "requestBody": {
               "required": true,
               "content": {
                  "application/json": {
                     "schema": {
                        "type": "object",
                        "properties": {
                           "start": {
                              "type": "integer",
                              "description": "Date and time the reservation becomes active",
                              "example": "123"
                           },
                           "end": {
                              "type": "integer",
                              "description": "Date and time of checkout",
                              "example": "123"
                           }
                        }
                     }
                  }
               }
            },
            "responses": {
               "201": {
                  "description": "Reservation updated successfully"
               },
               "400": {
                  "description": "Bad request"
               },
               "401": {
                  "description": "Unauthorized"
               }
            }
         }
      }
   }
}